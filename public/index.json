[{"content":"哈希表（Hash Table） 哈希表是一種高效率的數據結構，能夠以接近 O(1) 的時間複雜度進行數據查找、插入和刪除操作。它廣泛應用於數據庫索引、快取系統、符號表等場景，是現代編程中最重要的數據結構之一。\n基本原理 哈希表基於「鍵值對」（key-value pair）的概念，它使用一個特殊的函數（哈希函數）將鍵轉換為數組索引，然後將值存儲在該索引位置。\n核心組件 哈希函數：將鍵轉換為數組索引的函數 數組：存儲數據的物理結構 衝突解決策略：處理不同鍵產生相同索引的情況 哈希函數 好的哈希函數應當滿足以下特性：\n計算速度快 分布均勻，最小化衝突 確定性，相同輸入產生相同輸出 一個簡單的哈希函數示例（針對字符串）：\nint hash(char* key, int table_size) { unsigned int hash_value = 0; while (*key) { hash_value = (hash_value * 31) + *key++; } return hash_value % table_size; } 衝突解決 當兩個不同的鍵產生相同的哈希值（稱為「衝突」）時，我們需要有策略來解決這個問題：\n1. 鏈接法（Chaining） 每個數組位置存儲一個鏈表，所有哈希到同一位置的元素都放入這個鏈表中。\n[0] -\u0026gt; (key1, value1) -\u0026gt; (key4, value4) [1] -\u0026gt; (key2, value2) [2] -\u0026gt; (key3, value3) -\u0026gt; (key5, value5) -\u0026gt; (key6, value6) 2. 開放尋址法（Open Addressing） 當發生衝突時，查找數組中的另一個位置來存儲元素。常見的方法有：\n線性探測：檢查下一個位置，再下一個，依此類推 二次探測：使用二次函數計算探測序列 雙重哈希：使用第二個哈希函數計算步長 哈希表操作的時間複雜度 操作 平均情況 最壞情況 查找 O(1) O(n) 插入 O(1) O(n) 刪除 O(1) O(n) 最壞情況發生在所有鍵都哈希到同一位置時。\n實現示例（JavaScript） 以下是一個簡單的哈希表實現：\nclass HashTable { constructor(size = 53) { this.keyMap = new Array(size); } _hash(key) { let total = 0; let PRIME = 31; for (let i = 0; i \u0026lt; Math.min(key.length, 100); i++) { let char = key[i]; let value = char.charCodeAt(0) - 96; total = (total * PRIME + value) % this.keyMap.length; } return total; } set(key, value) { let index = this._hash(key); if (!this.keyMap[index]) { this.keyMap[index] = []; } this.keyMap[index].push([key, value]); } get(key) { let index = this._hash(key); if (this.keyMap[index]) { for (let i = 0; i \u0026lt; this.keyMap[index].length; i++) { if (this.keyMap[index][i][0] === key) { return this.keyMap[index][i][1]; } } } return undefined; } keys() { let keysArr = []; for (let i = 0; i \u0026lt; this.keyMap.length; i++) { if (this.keyMap[i]) { for (let j = 0; j \u0026lt; this.keyMap[i].length; j++) { if (!keysArr.includes(this.keyMap[i][j][0])) { keysArr.push(this.keyMap[i][j][0]); } } } } return keysArr; } values() { let valuesArr = []; for (let i = 0; i \u0026lt; this.keyMap.length; i++) { if (this.keyMap[i]) { for (let j = 0; j \u0026lt; this.keyMap[i].length; j++) { if (!valuesArr.includes(this.keyMap[i][j][1])) { valuesArr.push(this.keyMap[i][j][1]); } } } } return valuesArr; } } // 使用示例 const ht = new HashTable(); ht.set(\u0026#34;红色\u0026#34;, \u0026#34;#FF0000\u0026#34;); ht.set(\u0026#34;藍色\u0026#34;, \u0026#34;#0000FF\u0026#34;); ht.set(\u0026#34;綠色\u0026#34;, \u0026#34;#00FF00\u0026#34;); ht.get(\u0026#34;藍色\u0026#34;); // 返回 \u0026#34;#0000FF\u0026#34; 哈希表優化策略 負載因子控制：當元素數量與表大小的比值（負載因子）超過閾值時，需要擴容並重新哈希 好的哈希函數：選擇分布均勻的哈希函數 適當的初始容量：根據預計數據量設置初始容量 常見應用 數據庫索引：快速查找記錄 快取系統：如 Redis、Memcached 集合（Set）的實現：檢查成員資格 計數器：例如統計單詞頻率 關聯數組/字典：如 JavaScript 的物件、Python 的字典 總結 哈希表通過空間換時間的方式，實現了極高效率的數據存取。理解哈希表的工作原理和實現細節，對於開發高性能應用至關重要。在選擇數據結構時，如果需要快速查找、插入、刪除操作，且數據具有鍵值對特性，哈希表通常是最佳選擇。\n","permalink":"https://leetcode666.com/categories/leetcode/hashtable/hashtable/","summary":"\u003ch1 id=\"哈希表hash-table\"\u003e哈希表（Hash Table）\u003c/h1\u003e\n\u003cp\u003e哈希表是一種高效率的數據結構，能夠以接近 O(1) 的時間複雜度進行數據查找、插入和刪除操作。它廣泛應用於數據庫索引、快取系統、符號表等場景，是現代編程中最重要的數據結構之一。\u003c/p\u003e\n\u003ch2 id=\"基本原理\"\u003e基本原理\u003c/h2\u003e\n\u003cp\u003e哈希表基於「鍵值對」（key-value pair）的概念，它使用一個特殊的函數（哈希函數）將鍵轉換為數組索引，然後將值存儲在該索引位置。\u003c/p\u003e\n\u003ch3 id=\"核心組件\"\u003e核心組件\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e哈希函數\u003c/strong\u003e：將鍵轉換為數組索引的函數\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e數組\u003c/strong\u003e：存儲數據的物理結構\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e衝突解決策略\u003c/strong\u003e：處理不同鍵產生相同索引的情況\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"哈希函數\"\u003e哈希函數\u003c/h2\u003e\n\u003cp\u003e好的哈希函數應當滿足以下特性：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e計算速度快\u003c/li\u003e\n\u003cli\u003e分布均勻，最小化衝突\u003c/li\u003e\n\u003cli\u003e確定性，相同輸入產生相同輸出\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e一個簡單的哈希函數示例（針對字符串）：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-c\" data-lang=\"c\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etable_size\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kt\"\u003eunsigned\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ehash_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ehash_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehash_value\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e31\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ehash_value\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"n\"\u003etable_size\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"衝突解決\"\u003e衝突解決\u003c/h2\u003e\n\u003cp\u003e當兩個不同的鍵產生相同的哈希值（稱為「衝突」）時，我們需要有策略來解決這個問題：\u003c/p\u003e\n\u003ch3 id=\"1-鏈接法chaining\"\u003e1. 鏈接法（Chaining）\u003c/h3\u003e\n\u003cp\u003e每個數組位置存儲一個鏈表，所有哈希到同一位置的元素都放入這個鏈表中。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e[0] -\u0026gt; (key1, value1) -\u0026gt; (key4, value4)\n[1] -\u0026gt; (key2, value2)\n[2] -\u0026gt; (key3, value3) -\u0026gt; (key5, value5) -\u0026gt; (key6, value6)\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"2-開放尋址法open-addressing\"\u003e2. 開放尋址法（Open Addressing）\u003c/h3\u003e\n\u003cp\u003e當發生衝突時，查找數組中的另一個位置來存儲元素。常見的方法有：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e線性探測\u003c/strong\u003e：檢查下一個位置，再下一個，依此類推\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e二次探測\u003c/strong\u003e：使用二次函數計算探測序列\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e雙重哈希\u003c/strong\u003e：使用第二個哈希函數計算步長\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"哈希表操作的時間複雜度\"\u003e哈希表操作的時間複雜度\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e操作\u003c/th\u003e\n          \u003cth\u003e平均情況\u003c/th\u003e\n          \u003cth\u003e最壞情況\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e查找\u003c/td\u003e\n          \u003ctd\u003eO(1)\u003c/td\u003e\n          \u003ctd\u003eO(n)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e插入\u003c/td\u003e\n          \u003ctd\u003eO(1)\u003c/td\u003e\n          \u003ctd\u003eO(n)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e刪除\u003c/td\u003e\n          \u003ctd\u003eO(1)\u003c/td\u003e\n          \u003ctd\u003eO(n)\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e最壞情況發生在所有鍵都哈希到同一位置時。\u003c/p\u003e","title":"哈希表（Hash Table）：高效能的鍵值對數據結構"},{"content":"雜湊表進階應用 在上一篇文章中，我們介紹了雜湊表的基本原理和常見應用。本文將進一步探討雜湊表的進階應用，幫助您解決更複雜的 LeetCode 問題。\n與其他資料結構結合使用 雜湊表往往不是單獨使用，而是與其他資料結構結合，發揮更強大的功能。\n雜湊表 + 堆（Heap） LeetCode 347. Top K Frequent Elements\n找出數組中出現頻率最高的 k 個元素。\ndef topKFrequent(nums, k): # 使用雜湊表計算頻率 counter = {} for num in nums: counter[num] = counter.get(num, 0) + 1 # 使用堆找出頻率最高的 k 個元素 import heapq return heapq.nlargest(k, counter.keys(), key=lambda x: counter[x]) 雜湊表 + 鏈結串列 LeetCode 146. LRU Cache\n實現一個 LRU (Least Recently Used) 快取機制。\nclass DLinkedNode: def __init__(self, key=0, value=0): self.key = key self.value = value self.prev = None self.next = None class LRUCache: def __init__(self, capacity: int): self.cache = {} # 雜湊表：快速查找節點 self.size = 0 self.capacity = capacity self.head, self.tail = DLinkedNode(), DLinkedNode() # 虛擬頭尾節點 self.head.next = self.tail self.tail.prev = self.head def get(self, key: int) -\u0026gt; int: if key not in self.cache: return -1 node = self.cache[key] self._move_to_head(node) return node.value def put(self, key: int, value: int) -\u0026gt; None: if key not in self.cache: node = DLinkedNode(key, value) self.cache[key] = node self._add_to_head(node) self.size += 1 if self.size \u0026gt; self.capacity: removed = self._remove_tail() del self.cache[removed.key] self.size -= 1 else: node = self.cache[key] node.value = value self._move_to_head(node) def _add_to_head(self, node): node.prev = self.head node.next = self.head.next self.head.next.prev = node self.head.next = node def _remove_node(self, node): node.prev.next = node.next node.next.prev = node.prev def _move_to_head(self, node): self._remove_node(node) self._add_to_head(node) def _remove_tail(self): node = self.tail.prev self._remove_node(node) return node 多重雜湊表技巧 巢狀雜湊表 LeetCode 49. Group Anagrams\n將字母異位詞分組。\ndef groupAnagrams(strs): anagram_groups = {} for s in strs: # 將字串排序作為雜湊表的鍵 sorted_s = \u0026#39;\u0026#39;.join(sorted(s)) if sorted_s not in anagram_groups: anagram_groups[sorted_s] = [] anagram_groups[sorted_s].append(s) return list(anagram_groups.values()) 雙雜湊表 LeetCode 3. Longest Substring Without Repeating Characters\n尋找無重複字符的最長子串。\ndef lengthOfLongestSubstring(s): char_index = {} # 記錄字符最後出現的位置 max_length = 0 start = 0 for i, char in enumerate(s): if char in char_index and char_index[char] \u0026gt;= start: start = char_index[char] + 1 else: max_length = max(max_length, i - start + 1) char_index[char] = i return max_length 前綴和 + 雜湊表 LeetCode 560. Subarray Sum Equals K\n找出和等於 k 的連續子數組個數。\ndef subarraySum(nums, k): count = 0 sum_so_far = 0 prefix_sums = {0: 1} # 前綴和:出現次數 for num in nums: sum_so_far += num if sum_so_far - k in prefix_sums: count += prefix_sums[sum_so_far - k] prefix_sums[sum_so_far] = prefix_sums.get(sum_so_far, 0) + 1 return count 雜湊表在串列問題中的應用 LeetCode 138. Copy List with Random Pointer\n深度拷貝一個帶有隨機指針的鏈結串列。\ndef copyRandomList(head): if not head: return None # 第一次遍歷：創建所有新節點，並建立映射關係 old_to_new = {} current = head while current: old_to_new[current] = Node(current.val) current = current.next # 第二次遍歷：設置新節點的 next 和 random 指針 current = head while current: old_to_new[current].next = old_to_new.get(current.next) old_to_new[current].random = old_to_new.get(current.random) current = current.next return old_to_new[head] 雜湊表與位運算結合 LeetCode 136. Single Number\n找出數組中只出現一次的數字（其他數字都出現兩次）。\n# 使用雜湊表解法 def singleNumber(nums): num_count = {} for num in nums: num_count[num] = num_count.get(num, 0) + 1 for num, count in num_count.items(): if count == 1: return num # 使用位運算（XOR）解法 - 更高效 def singleNumber_optimized(nums): result = 0 for num in nums: result ^= num return result 雜湊表在圖論問題中的應用 LeetCode 133. Clone Graph\n深度拷貝一個無向圖。\ndef cloneGraph(node): if not node: return None # 使用雜湊表記錄已複製的節點 visited = {} def dfs(original): if original in visited: return visited[original] # 創建新節點 copy = Node(original.val) visited[original] = copy # 複製所有鄰居 for neighbor in original.neighbors: copy.neighbors.append(dfs(neighbor)) return copy return dfs(node) 雜湊表的效能優化技巧 合理選擇鍵的類型 選擇合適的鍵類型可以大幅提高雜湊表的效率：\n簡單數據類型（整數、字符等）通常有更高效的雜湊函數 對於複雜對象，確保其雜湊方法實現得當 對於需要比較順序的情況，考慮使用有序雜湊表（如 Python 的 OrderedDict） 處理碰撞的進階技術 再雜湊法（Double Hashing）：使用第二個雜湊函數來計算步長 羅賓漢雜湊（Robin Hood Hashing）：基於元素的\u0026quot;貧富差距\u0026quot;調整位置 杜魯門雜湊（Cuckoo Hashing）：使用多個雜湊函數和多個表 自訂雜湊函數 在某些情況下，我們需要為自定義對象設計雜湊函數。以 Python 為例：\nclass Point: def __init__(self, x, y): self.x = x self.y = y def __eq__(self, other): if not isinstance(other, Point): return False return self.x == other.x and self.y == other.y def __hash__(self): return hash((self.x, self.y)) # 使用 Point 對象作為雜湊表的鍵 points = {} points[Point(1, 2)] = \u0026#34;Point A\u0026#34; points[Point(3, 4)] = \u0026#34;Point B\u0026#34; 總結 雜湊表是解決複雜 LeetCode 問題的強大工具，特別是當與其他資料結構結合使用時。掌握這些進階應用技巧，將幫助您更有效地解決演算法難題。\n關鍵要點：\n學會將雜湊表與其他資料結構結合使用 掌握前綴和等技巧與雜湊表的聯合應用 了解雜湊表在圖論和鏈結串列問題中的應用 使用適當的技巧優化雜湊表的效能 希望這篇文章能幫助您在 LeetCode 的解題過程中更靈活地運用雜湊表！\n","permalink":"https://leetcode666.com/categories/leetcode/hashtable/advanced-hashtable/","summary":"\u003ch1 id=\"雜湊表進階應用\"\u003e雜湊表進階應用\u003c/h1\u003e\n\u003cp\u003e在\u003ca href=\"/categories/leetcode/hashtable/\"\u003e上一篇文章\u003c/a\u003e中，我們介紹了雜湊表的基本原理和常見應用。本文將進一步探討雜湊表的進階應用，幫助您解決更複雜的 LeetCode 問題。\u003c/p\u003e\n\u003ch2 id=\"與其他資料結構結合使用\"\u003e與其他資料結構結合使用\u003c/h2\u003e\n\u003cp\u003e雜湊表往往不是單獨使用，而是與其他資料結構結合，發揮更強大的功能。\u003c/p\u003e\n\u003ch3 id=\"雜湊表--堆heap\"\u003e雜湊表 + 堆（Heap）\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://leetcode.com/problems/top-k-frequent-elements/\"\u003eLeetCode 347. Top K Frequent Elements\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e找出數組中出現頻率最高的 k 個元素。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etopKFrequent\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# 使用雜湊表計算頻率\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003ecounter\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003enum\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003enums\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003ecounter\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecounter\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# 使用堆找出頻率最高的 k 個元素\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003eheapq\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eheapq\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enlargest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecounter\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003elambda\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ecounter\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"雜湊表--鏈結串列\"\u003e雜湊表 + 鏈結串列\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://leetcode.com/problems/lru-cache/\"\u003eLeetCode 146. LRU Cache\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e實現一個 LRU (Least Recently Used) 快取機制。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eDLinkedNode\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"fm\"\u003e__init__\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eNone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"kc\"\u003eNone\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eLRUCache\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"fm\"\u003e__init__\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecache\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 雜湊表：快速查找節點\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecapacity\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ecapacity\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etail\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDLinkedNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(),\u003c/span\u003e \u003cspan class=\"n\"\u003eDLinkedNode\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e  \u003cspan class=\"c1\"\u003e# 虛擬頭尾節點\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etail\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etail\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eget\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e \u003cspan class=\"ow\"\u003enot\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003enode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003e_move_to_head\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eput\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e \u003cspan class=\"kc\"\u003eNone\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e \u003cspan class=\"ow\"\u003enot\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003enode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eDLinkedNode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003e_add_to_head\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecapacity\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"n\"\u003eremoved\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003e_remove_tail\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"k\"\u003edel\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eremoved\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esize\u003c/span\u003e \u003cspan class=\"o\"\u003e-=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003enode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecache\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003e_move_to_head\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003e_add_to_head\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ehead\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003e_remove_node\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003enext\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003e_move_to_head\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003e_remove_node\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003e_add_to_head\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003e_remove_tail\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"n\"\u003enode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etail\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eprev\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"bp\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003e_remove_node\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"多重雜湊表技巧\"\u003e多重雜湊表技巧\u003c/h2\u003e\n\u003ch3 id=\"巢狀雜湊表\"\u003e巢狀雜湊表\u003c/h3\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://leetcode.com/problems/group-anagrams/\"\u003eLeetCode 49. Group Anagrams\u003c/a\u003e\u003c/strong\u003e\u003c/p\u003e","title":"雜湊表進階應用 - 解決複雜 LeetCode 問題"},{"content":"RESTful API 設計最佳實踐 良好的 API 設計可以提高開發效率、改善用戶體驗並減少錯誤。本文將分享一些 RESTful API 設計的最佳實踐。\nURL 結構設計 RESTful API 應使用直觀的 URL 結構，以資源為中心：\n# 好的設計 GET /users # 獲取所有用戶 GET /users/123 # 獲取特定用戶 POST /users # 創建新用戶 PUT /users/123 # 更新用戶 DELETE /users/123 # 刪除用戶 # 避免的設計 GET /getUsers POST /createUser HTTP 方法的正確使用 每個 HTTP 方法都有特定用途：\nGET：讀取資源 POST：創建新資源 PUT：完全更新資源 PATCH：部分更新資源 DELETE：刪除資源 狀態碼 正確使用 HTTP 狀態碼可以提供明確的回應：\n2xx：成功\n200 OK：請求成功 201 Created：資源創建成功 204 No Content：請求成功但無返回內容 4xx：客戶端錯誤\n400 Bad Request：請求格式錯誤 401 Unauthorized：未授權 404 Not Found：資源不存在 5xx：服務器錯誤\n500 Internal Server Error：服務器內部錯誤 版本控制 API 版本控制有多種方式：\n# URL 路徑版本 /api/v1/users # 請求頭版本 Accept: application/vnd.company.v1+json 文檔化 好的 API 需要完整的文檔。考慮使用 Swagger/OpenAPI 來自動生成文檔。\n結論 遵循 RESTful 設計原則，可以創建出易於理解、使用和維護的 API。記住，良好的設計應該優先考慮簡單性和一致性。\n","permalink":"https://leetcode666.com/posts/restful-api-design/","summary":"\u003ch1 id=\"restful-api-設計最佳實踐\"\u003eRESTful API 設計最佳實踐\u003c/h1\u003e\n\u003cp\u003e良好的 API 設計可以提高開發效率、改善用戶體驗並減少錯誤。本文將分享一些 RESTful API 設計的最佳實踐。\u003c/p\u003e\n\u003ch2 id=\"url-結構設計\"\u003eURL 結構設計\u003c/h2\u003e\n\u003cp\u003eRESTful API 應使用直觀的 URL 結構，以資源為中心：\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e# 好的設計\nGET /users          # 獲取所有用戶\nGET /users/123      # 獲取特定用戶\nPOST /users         # 創建新用戶\nPUT /users/123      # 更新用戶\nDELETE /users/123   # 刪除用戶\n\n# 避免的設計\nGET /getUsers\nPOST /createUser\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"http-方法的正確使用\"\u003eHTTP 方法的正確使用\u003c/h2\u003e\n\u003cp\u003e每個 HTTP 方法都有特定用途：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eGET\u003c/strong\u003e：讀取資源\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePOST\u003c/strong\u003e：創建新資源\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePUT\u003c/strong\u003e：完全更新資源\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003ePATCH\u003c/strong\u003e：部分更新資源\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDELETE\u003c/strong\u003e：刪除資源\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"狀態碼\"\u003e狀態碼\u003c/h2\u003e\n\u003cp\u003e正確使用 HTTP 狀態碼可以提供明確的回應：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e2xx\u003c/strong\u003e：成功\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e200 OK：請求成功\u003c/li\u003e\n\u003cli\u003e201 Created：資源創建成功\u003c/li\u003e\n\u003cli\u003e204 No Content：請求成功但無返回內容\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e4xx\u003c/strong\u003e：客戶端錯誤\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e400 Bad Request：請求格式錯誤\u003c/li\u003e\n\u003cli\u003e401 Unauthorized：未授權\u003c/li\u003e\n\u003cli\u003e404 Not Found：資源不存在\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003e5xx\u003c/strong\u003e：服務器錯誤\u003c/p\u003e","title":"RESTful API 設計最佳實踐"},{"content":"後端架構設計指南 在設計可擴展、高效的後端系統時，有許多關鍵因素需要考慮。本文將介紹現代後端架構的幾個重要原則。\n1. 微服務 vs 單體架構 選擇適合您項目的架構模式取決於多種因素，包括團隊規模、項目複雜度以及業務需求。\n單體架構的優點 開發簡單 部署方便 測試相對容易 微服務架構的優點 服務獨立擴展 技術多樣性 故障隔離 2. 無狀態設計 無狀態設計允許系統更容易擴展：\n# 無狀態 API 示例 @app.route(\u0026#39;/api/user/\u0026lt;user_id\u0026gt;\u0026#39;, methods=[\u0026#39;GET\u0026#39;]) def get_user(user_id): # 從數據庫獲取數據，而不是從本地狀態 user = db.query(User).filter(User.id == user_id).first() return jsonify(user.to_dict()) 3. 緩存策略 適當的緩存實現可以顯著提高性能：\nRedis 用於快速數據存取 CDN 用於靜態資源 本地內存緩存用於高頻訪問數據 結論 好的後端架構應該是可擴展、可維護且安全的。根據項目需求選擇適合的技術堆棧，並遵循行業最佳實踐，將幫助您構建健壯的系統。\n","permalink":"https://leetcode666.com/posts/backend-architecture-intro/","summary":"\u003ch1 id=\"後端架構設計指南\"\u003e後端架構設計指南\u003c/h1\u003e\n\u003cp\u003e在設計可擴展、高效的後端系統時，有許多關鍵因素需要考慮。本文將介紹現代後端架構的幾個重要原則。\u003c/p\u003e\n\u003ch2 id=\"1-微服務-vs-單體架構\"\u003e1. 微服務 vs 單體架構\u003c/h2\u003e\n\u003cp\u003e選擇適合您項目的架構模式取決於多種因素，包括團隊規模、項目複雜度以及業務需求。\u003c/p\u003e\n\u003ch3 id=\"單體架構的優點\"\u003e單體架構的優點\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e開發簡單\u003c/li\u003e\n\u003cli\u003e部署方便\u003c/li\u003e\n\u003cli\u003e測試相對容易\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"微服務架構的優點\"\u003e微服務架構的優點\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e服務獨立擴展\u003c/li\u003e\n\u003cli\u003e技術多樣性\u003c/li\u003e\n\u003cli\u003e故障隔離\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"2-無狀態設計\"\u003e2. 無狀態設計\u003c/h2\u003e\n\u003cp\u003e無狀態設計允許系統更容易擴展：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-python\" data-lang=\"python\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 無狀態 API 示例\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nd\"\u003e@app.route\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;/api/user/\u0026lt;user_id\u0026gt;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003emethods\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;GET\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eget_user\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euser_id\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"c1\"\u003e# 從數據庫獲取數據，而不是從本地狀態\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"n\"\u003euser\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003edb\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003equery\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eUser\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003euser_id\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ejsonify\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003euser\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eto_dict\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"3-緩存策略\"\u003e3. 緩存策略\u003c/h2\u003e\n\u003cp\u003e適當的緩存實現可以顯著提高性能：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eRedis 用於快速數據存取\u003c/li\u003e\n\u003cli\u003eCDN 用於靜態資源\u003c/li\u003e\n\u003cli\u003e本地內存緩存用於高頻訪問數據\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"結論\"\u003e結論\u003c/h2\u003e\n\u003cp\u003e好的後端架構應該是可擴展、可維護且安全的。根據項目需求選擇適合的技術堆棧，並遵循行業最佳實踐，將幫助您構建健壯的系統。\u003c/p\u003e","title":"後端架構設計指南"},{"content":"鏈表（Linked List） 鏈表是一種常見的線性數據結構，它通過「節點」將數據元素順序連接。與數組不同，鏈表中的元素在內存中不必連續存儲，而是通過指針或引用彼此相連。\n鏈表的基本結構 每個鏈表節點包含兩部分：\n數據域：存儲節點的值 指針域：指向下一個節點的引用 +-------------+ +-------------+ +-------------+ | 數據 | 下一個 |---\u0026gt;| 數據 | 下一個 |---\u0026gt;| 數據 | 下一個 |---\u0026gt;NULL +-------------+ +-------------+ +-------------+ 鏈表的種類 1. 單向鏈表（Singly Linked List） 每個節點只有一個指向下一節點的指針。\nHead -\u0026gt; [Data|Next] -\u0026gt; [Data|Next] -\u0026gt; [Data|Next] -\u0026gt; NULL 2. 雙向鏈表（Doubly Linked List） 每個節點有兩個指針，分別指向前一個和後一個節點。\nNULL \u0026lt;- [Prev|Data|Next] \u0026lt;-\u0026gt; [Prev|Data|Next] \u0026lt;-\u0026gt; [Prev|Data|Next] -\u0026gt; NULL ^ | Head 3. 循環鏈表（Circular Linked List） 最後一個節點指向第一個節點，形成一個環。\n+------------------------------------------+ | | v | Head -\u0026gt; [Data|Next] -\u0026gt; [Data|Next] -\u0026gt; [Data|Next] 鏈表操作的時間複雜度 操作 單向鏈表 雙向鏈表 訪問元素 O(n) O(n) 在頭部插入 O(1) O(1) 在尾部插入 O(n)/O(1)* O(1) 在中間插入 O(n) O(n) 刪除節點 O(n) O(1)** * 如果保存了尾指針 ** 已知節點位置的情況下\n鏈表的優缺點 優點 動態大小（可以根據需要擴展） 高效的插入和刪除操作（與數組相比） 不需要連續的內存空間 實現某些高級數據結構（如堆棧、隊列、圖）的基礎 缺點 不支持隨機訪問（無法通過索引直接訪問） 每個節點需要額外的內存存儲指針 在遍歷過程中時間效率較低（與數組相比） 不適合需要頻繁隨機訪問的場景 實現示例（Java） 單向鏈表的實現 public class SinglyLinkedList\u0026lt;T\u0026gt; { // 節點定義 private class Node { T data; Node next; Node(T data) { this.data = data; this.next = null; } } private Node head; private int size; // 建構函數 public SinglyLinkedList() { head = null; size = 0; } // 在列表頭部添加節點 public void addFirst(T data) { Node newNode = new Node(data); newNode.next = head; head = newNode; size++; } // 在列表尾部添加節點 public void addLast(T data) { Node newNode = new Node(data); if (head == null) { head = newNode; } else { Node current = head; while (current.next != null) { current = current.next; } current.next = newNode; } size++; } // 刪除第一個節點 public T removeFirst() { if (head == null) throw new NoSuchElementException(); T data = head.data; head = head.next; size--; return data; } // 獲取列表大小 public int size() { return size; } // 檢查列表是否為空 public boolean isEmpty() { return head == null; } // 列印列表 public void printList() { Node current = head; while (current != null) { System.out.print(current.data + \u0026#34; -\u0026gt; \u0026#34;); current = current.next; } System.out.println(\u0026#34;NULL\u0026#34;); } } 雙向鏈表的實現 public class DoublyLinkedList\u0026lt;T\u0026gt; { // 節點定義 private class Node { T data; Node next; Node prev; Node(T data) { this.data = data; this.next = null; this.prev = null; } } private Node head; private Node tail; private int size; // 建構函數 public DoublyLinkedList() { head = null; tail = null; size = 0; } // 在列表頭部添加節點 public void addFirst(T data) { Node newNode = new Node(data); if (head == null) { head = newNode; tail = newNode; } else { newNode.next = head; head.prev = newNode; head = newNode; } size++; } // 在列表尾部添加節點 public void addLast(T data) { Node newNode = new Node(data); if (tail == null) { head = newNode; tail = newNode; } else { tail.next = newNode; newNode.prev = tail; tail = newNode; } size++; } // 獲取列表大小 public int size() { return size; } // 列印列表（從頭到尾） public void printForward() { Node current = head; while (current != null) { System.out.print(current.data + \u0026#34; \u0026lt;-\u0026gt; \u0026#34;); current = current.next; } System.out.println(\u0026#34;NULL\u0026#34;); } // 列印列表（從尾到頭） public void printBackward() { Node current = tail; while (current != null) { System.out.print(current.data + \u0026#34; \u0026lt;-\u0026gt; \u0026#34;); current = current.prev; } System.out.println(\u0026#34;NULL\u0026#34;); } } 實際應用場景 瀏覽器歷史記錄：使用雙向鏈表實現前進和後退功能 音樂播放列表：歌曲之間的跳轉和循環 操作系統中的任務調度 圖像處理中的多級撤銷功能 散列表中解決衝突的鏈接法 實現堆棧、隊列、LRU快取等高級數據結構 LeetCode常見鏈表題目 鏈表是面試中常見的考題類型，以下是一些常見的LeetCode鏈表題目：\n反轉鏈表（206） 檢測循環鏈表（141） 合併兩個有序鏈表（21） 刪除鏈表的倒數第N個節點（19） 鏈表的中間節點（876） 總結 鏈表是一種靈活的數據結構，適用於需要頻繁插入和刪除操作的場景。儘管它在隨機訪問方面效率較低，但在某些特定應用中具有明顯優勢。理解鏈表的工作原理和實現細節，對於解決複雜問題和設計高效算法至關重要。\n在實際應用中，我們需要根據具體問題的需求，在數組和鏈表之間做出適當的選擇。有時，結合兩種數據結構的混合實現，可以獲得最佳性能。\n","permalink":"https://leetcode666.com/categories/leetcode/linkedlist/linkedlist/","summary":"\u003ch1 id=\"鏈表linked-list\"\u003e鏈表（Linked List）\u003c/h1\u003e\n\u003cp\u003e鏈表是一種常見的線性數據結構，它通過「節點」將數據元素順序連接。與數組不同，鏈表中的元素在內存中不必連續存儲，而是通過指針或引用彼此相連。\u003c/p\u003e\n\u003ch2 id=\"鏈表的基本結構\"\u003e鏈表的基本結構\u003c/h2\u003e\n\u003cp\u003e每個鏈表節點包含兩部分：\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003e數據域\u003c/strong\u003e：存儲節點的值\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e指針域\u003c/strong\u003e：指向下一個節點的引用\u003c/li\u003e\n\u003c/ol\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e+-------------+    +-------------+    +-------------+\n| 數據 | 下一個 |---\u0026gt;| 數據 | 下一個 |---\u0026gt;| 數據 | 下一個 |---\u0026gt;NULL\n+-------------+    +-------------+    +-------------+\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"鏈表的種類\"\u003e鏈表的種類\u003c/h2\u003e\n\u003ch3 id=\"1-單向鏈表singly-linked-list\"\u003e1. 單向鏈表（Singly Linked List）\u003c/h3\u003e\n\u003cp\u003e每個節點只有一個指向下一節點的指針。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eHead -\u0026gt; [Data|Next] -\u0026gt; [Data|Next] -\u0026gt; [Data|Next] -\u0026gt; NULL\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"2-雙向鏈表doubly-linked-list\"\u003e2. 雙向鏈表（Doubly Linked List）\u003c/h3\u003e\n\u003cp\u003e每個節點有兩個指針，分別指向前一個和後一個節點。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003eNULL \u0026lt;- [Prev|Data|Next] \u0026lt;-\u0026gt; [Prev|Data|Next] \u0026lt;-\u0026gt; [Prev|Data|Next] -\u0026gt; NULL\n        ^\n        |\n       Head\n\u003c/code\u003e\u003c/pre\u003e\u003ch3 id=\"3-循環鏈表circular-linked-list\"\u003e3. 循環鏈表（Circular Linked List）\u003c/h3\u003e\n\u003cp\u003e最後一個節點指向第一個節點，形成一個環。\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e     +------------------------------------------+\n     |                                          |\n     v                                          |\n    Head -\u0026gt; [Data|Next] -\u0026gt; [Data|Next] -\u0026gt; [Data|Next]\n\u003c/code\u003e\u003c/pre\u003e\u003ch2 id=\"鏈表操作的時間複雜度\"\u003e鏈表操作的時間複雜度\u003c/h2\u003e\n\u003ctable\u003e\n  \u003cthead\u003e\n      \u003ctr\u003e\n          \u003cth\u003e操作\u003c/th\u003e\n          \u003cth\u003e單向鏈表\u003c/th\u003e\n          \u003cth\u003e雙向鏈表\u003c/th\u003e\n      \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e訪問元素\u003c/td\u003e\n          \u003ctd\u003eO(n)\u003c/td\u003e\n          \u003ctd\u003eO(n)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e在頭部插入\u003c/td\u003e\n          \u003ctd\u003eO(1)\u003c/td\u003e\n          \u003ctd\u003eO(1)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e在尾部插入\u003c/td\u003e\n          \u003ctd\u003eO(n)/O(1)*\u003c/td\u003e\n          \u003ctd\u003eO(1)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e在中間插入\u003c/td\u003e\n          \u003ctd\u003eO(n)\u003c/td\u003e\n          \u003ctd\u003eO(n)\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n          \u003ctd\u003e刪除節點\u003c/td\u003e\n          \u003ctd\u003eO(n)\u003c/td\u003e\n          \u003ctd\u003eO(1)**\u003c/td\u003e\n      \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e* 如果保存了尾指針\n** 已知節點位置的情況下\u003c/p\u003e","title":"鏈表（Linked List）：動態數據結構的基石"},{"content":"資料庫效能優化全指南 在現代應用程式開發中，資料庫效能往往是系統整體性能的關鍵瓶頸。本文將從多個層面探討如何優化資料庫效能，涵蓋從基本的查詢優化到進階的系統配置調整。\n查詢優化基礎 1. 使用 EXPLAIN 分析查詢 在優化任何查詢前，首先應該了解它的執行計劃：\nEXPLAIN SELECT * FROM users WHERE email = \u0026#39;example@domain.com\u0026#39;; EXPLAIN 提供的關鍵指標：\n使用的索引 掃描的行數 使用的連接類型 臨時表和檔案排序的使用情況 2. 避免 SELECT * 只查詢需要的欄位，減少網路傳輸和記憶體使用：\n-- 不推薦 SELECT * FROM products WHERE category_id = 5; -- 推薦 SELECT id, name, price FROM products WHERE category_id = 5; 3. 使用適當的 WHERE 條件 確保 WHERE 條件能夠使用到索引：\n-- 可能使用不到索引 SELECT * FROM users WHERE YEAR(created_at) = 2023; -- 重寫為使用索引的形式 SELECT * FROM users WHERE created_at BETWEEN \u0026#39;2023-01-01\u0026#39; AND \u0026#39;2023-12-31\u0026#39;; 4. 限制結果集大小 使用 LIMIT 控制返回的記錄數：\nSELECT * FROM logs ORDER BY created_at DESC LIMIT 100; 索引設計與優化 1. 基礎索引原則 為經常用於 WHERE、JOIN 和 ORDER BY 的欄位建立索引 高選擇性的欄位（唯一值較多）更適合建立索引 避免在頻繁更新的欄位上建立過多索引 2. 複合索引設計 複合索引的欄位順序至關重要：\n-- 創建複合索引 CREATE INDEX idx_users_email_status ON users(email, status); -- 能使用索引 SELECT * FROM users WHERE email = \u0026#39;test@example.com\u0026#39; AND status = \u0026#39;active\u0026#39;; SELECT * FROM users WHERE email = \u0026#39;test@example.com\u0026#39;; -- 可能無法使用索引 SELECT * FROM users WHERE status = \u0026#39;active\u0026#39;; 3. 覆蓋索引 設計索引使查詢只需要訪問索引而不需要訪問表：\n-- 創建包含所需欄位的索引 CREATE INDEX idx_products_category_name_price ON products(category_id, name, price); -- 查詢只需訪問索引 SELECT name, price FROM products WHERE category_id = 5; 4. 定期分析和重建索引 隨著數據變化，索引可能變得碎片化：\n-- MySQL/MariaDB ANALYZE TABLE users; OPTIMIZE TABLE users; -- PostgreSQL VACUUM ANALYZE users; REINDEX TABLE users; 資料庫架構優化 1. 表正規化與反正規化 正規化：減少資料重複，提高資料一致性 反正規化：適度增加資料冗餘，減少連接操作，提高讀取效能 判斷使用哪種策略時，考慮：\n讀取/寫入比率 查詢模式 資料一致性需求 2. 分區表 將大表分割成較小的、更易管理的部分：\n-- MySQL 例子，按年份分區 CREATE TABLE sales ( id INT NOT NULL, sale_date DATE NOT NULL, amount DECIMAL(10,2) ) PARTITION BY RANGE (YEAR(sale_date)) ( PARTITION p2021 VALUES LESS THAN (2022), PARTITION p2022 VALUES LESS THAN (2023), PARTITION p2023 VALUES LESS THAN (2024) ); 3. 讀寫分離 將讀操作導向複本/從伺服器 將寫操作導向主伺服器 通過中間層或ORM設定路由規則 4. 分片（Sharding） 對於超大規模應用，水平分片可以將資料分布到多個資料庫：\n按鍵範圍分片：例如用戶ID 1-1000000在Shard1，1000001-2000000在Shard2 按雜湊分片：計算記錄的雜湊值來決定分片位置 按地理位置分片：不同地區的資料存放在就近的資料庫伺服器 資料庫系統配置優化 1. 記憶體配置 調整緩衝池和查詢快取的大小：\n# MySQL例子 innodb_buffer_pool_size = 8G # 通常設為系統記憶體的50-70% innodb_log_file_size = 512M # 較大的日誌文件減少檢查點次數 2. 磁碟I/O優化 使用SSD而非傳統硬碟 RAID配置（RAID10通常最適合資料庫） 分離資料文件和日誌文件到不同磁碟 3. 連線池設定 避免頻繁建立和銷毀資料庫連線：\n# PostgreSQL例子 max_connections = 100 shared_buffers = 2GB work_mem = 32MB 4. 查詢快取 對於讀多寫少的應用，配置適當的查詢快取：\n# MySQL例子 (注意：MySQL 8.0+已棄用) query_cache_type = 1 query_cache_size = 256M 監控與持續優化 1. 關鍵指標監控 查詢響應時間 查詢吞吐量 緩存命中率 慢查詢數量 鎖等待時間 2. 慢查詢日誌分析 啟用並定期分析慢查詢日誌：\n# MySQL配置 slow_query_log = 1 slow_query_log_file = /var/log/mysql/slow.log long_query_time = 1 # 超過1秒的查詢記入日誌 常用分析工具：\npt-query-digest (Percona Toolkit) pgBadger (PostgreSQL) 3. 自動化效能測試 建立基準測試套件，在重大變更前評估效能影響：\nsysbench pgbench (PostgreSQL) JMeter 特定資料庫優化技巧 MySQL/MariaDB -- 優化表結構 ALTER TABLE orders ENGINE=InnoDB; -- 使用InnoDB引擎 -- 查看表統計資訊 SHOW TABLE STATUS LIKE \u0026#39;users\u0026#39;; -- 調整自動增長步長，減少在多伺服器環境中的衝突 SET @@auto_increment_increment=10; PostgreSQL -- 自動分析統計資訊 ALTER TABLE users SET (autovacuum_enabled = on); -- 使用部分索引，僅為符合條件的列建立索引 CREATE INDEX idx_active_users ON users(email) WHERE status = \u0026#39;active\u0026#39;; -- 使用BRIN索引代替B-tree索引，適用於有序大表 CREATE INDEX idx_logs_timestamp ON logs USING BRIN (created_at); 案例分析 案例1：電子商務訂單查詢優化 問題：訂單歷史查詢緩慢，特別是對有大量訂單的客戶。\n解決方案：\n為customer_id和order_date創建複合索引 分區表按訂單日期範圍 為常用查詢條件增加覆蓋索引 考慮對歷史訂單進行歸檔 優化後：查詢時間從2秒降至50毫秒。\n案例2：社交媒體貼文列表 問題：用戶動態流查詢涉及多表連接，效能差。\n解決方案：\n查詢反正規化，預先計算並存儲關鍵統計 實現讀寫分離，讀取操作到從伺服器 使用快取層（Redis）存儲熱門貼文 實現無限滾動而非分頁，限制每次載入數量 優化後：頁面載入時間減少75%，伺服器負載降低60%。\n總結 資料庫優化是一個持續的過程，需要結合多種策略：\n查詢層面：編寫高效SQL，使用EXPLAIN分析執行計劃 結構層面：設計合適的索引和表結構 架構層面：實現分區、分片和讀寫分離 系統層面：調整資料庫伺服器配置 最佳實踐是從應用程式設計階段就考慮資料庫效能，並建立持續監控和優化的機制。針對特定應用場景，進行針對性優化往往比通用策略更有效。\n","permalink":"https://leetcode666.com/categories/database/optimization/","summary":"\u003ch1 id=\"資料庫效能優化全指南\"\u003e資料庫效能優化全指南\u003c/h1\u003e\n\u003cp\u003e在現代應用程式開發中，資料庫效能往往是系統整體性能的關鍵瓶頸。本文將從多個層面探討如何優化資料庫效能，涵蓋從基本的查詢優化到進階的系統配置調整。\u003c/p\u003e\n\u003ch2 id=\"查詢優化基礎\"\u003e查詢優化基礎\u003c/h2\u003e\n\u003ch3 id=\"1-使用-explain-分析查詢\"\u003e1. 使用 EXPLAIN 分析查詢\u003c/h3\u003e\n\u003cp\u003e在優化任何查詢前，首先應該了解它的執行計劃：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eEXPLAIN\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eWHERE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eemail\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;example@domain.com\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEXPLAIN 提供的關鍵指標：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用的索引\u003c/li\u003e\n\u003cli\u003e掃描的行數\u003c/li\u003e\n\u003cli\u003e使用的連接類型\u003c/li\u003e\n\u003cli\u003e臨時表和檔案排序的使用情況\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-避免-select-\"\u003e2. 避免 SELECT *\u003c/h3\u003e\n\u003cp\u003e只查詢需要的欄位，減少網路傳輸和記憶體使用：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e-- 不推薦\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eproducts\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eWHERE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecategory_id\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e-- 推薦\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eid\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eprice\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eproducts\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eWHERE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecategory_id\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"3-使用適當的-where-條件\"\u003e3. 使用適當的 WHERE 條件\u003c/h3\u003e\n\u003cp\u003e確保 WHERE 條件能夠使用到索引：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sql\" data-lang=\"sql\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e-- 可能使用不到索引\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eWHERE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eYEAR\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecreated_at\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"mi\"\u003e2023\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"w\"\u003e\u003c/span\u003e\u003cspan class=\"c1\"\u003e-- 重寫為使用索引的形式\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eSELECT\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eFROM\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003eusers\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eWHERE\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"n\"\u003ecreated_at\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eBETWEEN\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;2023-01-01\u0026#39;\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"k\"\u003eAND\u003c/span\u003e\u003cspan class=\"w\"\u003e \u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;2023-12-31\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003cspan class=\"w\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"4-限制結果集大小\"\u003e4. 限制結果集大小\u003c/h3\u003e\n\u003cp\u003e使用 LIMIT 控制返回的記錄數：\u003c/p\u003e","title":"資料庫效能優化全指南"},{"content":"Django後端開發基礎 Django是一個高級的Python Web框架，它鼓勵快速開發和乾淨、實用的設計。由經驗豐富的開發人員構建，Django負責Web開發中許多麻煩的部分，因此您可以專注於編寫應用程序，而無需重新發明輪子。\nDjango的核心理念 Django的設計哲學可以概括為以下幾點：\nDRY (Don\u0026rsquo;t Repeat Yourself) - 減少代碼重複 快速開發 - 從概念到完成的框架 松耦合 - 各個組件相互獨立 明確優於隱晦 - 顯式好於隱式 模型-視圖-模板 - 清晰的架構分離 環境設置 開始使用Django前，需要先設置開發環境：\n# 創建虛擬環境 python -m venv venv # 激活虛擬環境 # Windows venv\\Scripts\\activate # macOS/Linux source venv/bin/activate # 安裝Django pip install django # 檢查版本 python -m django --version 創建第一個Django項目 以下是創建新Django項目的基本步驟：\n# 創建項目 django-admin startproject myproject # 切換到項目目錄 cd myproject # 創建應用 python manage.py startapp myapp # 運行開發伺服器 python manage.py runserver Django項目結構 一個基本的Django項目結構如下：\nmyproject/ manage.py myproject/ __init__.py settings.py urls.py asgi.py wsgi.py myapp/ migrations/ __init__.py admin.py apps.py models.py tests.py views.py Django MTV架構 Django使用MTV（Model-Template-View）架構，這是MVC架構的一種變體：\nModel (模型) - 負責數據結構和數據庫交互 Template (模板) - 負責HTML和表現層 View (視圖) - 負責處理業務邏輯 模型示例 # myapp/models.py from django.db import models class Article(models.Model): title = models.CharField(max_length=200) content = models.TextField() pub_date = models.DateTimeField(\u0026#39;date published\u0026#39;) def __str__(self): return self.title 視圖示例 # myapp/views.py from django.shortcuts import render from .models import Article def article_list(request): articles = Article.objects.all().order_by(\u0026#39;-pub_date\u0026#39;) context = {\u0026#39;articles\u0026#39;: articles} return render(request, \u0026#39;myapp/article_list.html\u0026#39;, context) URL配置示例 # myproject/urls.py from django.contrib import admin from django.urls import path, include urlpatterns = [ path(\u0026#39;admin/\u0026#39;, admin.site.urls), path(\u0026#39;articles/\u0026#39;, include(\u0026#39;myapp.urls\u0026#39;)), ] # myapp/urls.py from django.urls import path from . import views urlpatterns = [ path(\u0026#39;\u0026#39;, views.article_list, name=\u0026#39;article_list\u0026#39;), path(\u0026#39;\u0026lt;int:article_id\u0026gt;/\u0026#39;, views.article_detail, name=\u0026#39;article_detail\u0026#39;), ] 模板示例 \u0026lt;!-- myapp/templates/myapp/article_list.html --\u0026gt; \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Article List\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Articles\u0026lt;/h1\u0026gt; \u0026lt;ul\u0026gt; {% for article in articles %} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026#34;{% url \u0026#39;article_detail\u0026#39; article.id %}\u0026#34;\u0026gt; {{ article.title }} \u0026lt;/a\u0026gt; \u0026lt;small\u0026gt;{{ article.pub_date }}\u0026lt;/small\u0026gt; \u0026lt;/li\u0026gt; {% endfor %} \u0026lt;/ul\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 數據庫遷移 Django的數據庫遷移系統使管理數據庫模式變得簡單：\n# 創建遷移 python manage.py makemigrations myapp # 應用遷移 python manage.py migrate Django管理員界面 Django自帶一個功能強大的管理員界面：\n# myapp/admin.py from django.contrib import admin from .models import Article admin.site.register(Article) 訪問管理界面需要創建超級用戶：\npython manage.py createsuperuser 表單處理 Django提供了高效的表單處理功能：\n# myapp/forms.py from django import forms from .models import Article class ArticleForm(forms.ModelForm): class Meta: model = Article fields = [\u0026#39;title\u0026#39;, \u0026#39;content\u0026#39;] 中間件和認證 Django包含強大的middleware系統和內置的用戶認證：\n# settings.py (部分) MIDDLEWARE = [ \u0026#39;django.middleware.security.SecurityMiddleware\u0026#39;, \u0026#39;django.contrib.sessions.middleware.SessionMiddleware\u0026#39;, \u0026#39;django.middleware.common.CommonMiddleware\u0026#39;, \u0026#39;django.middleware.csrf.CsrfViewMiddleware\u0026#39;, \u0026#39;django.contrib.auth.middleware.AuthenticationMiddleware\u0026#39;, \u0026#39;django.contrib.messages.middleware.MessageMiddleware\u0026#39;, \u0026#39;django.middleware.clickjacking.XFrameOptionsMiddleware\u0026#39;, ] 結論 Django是一個功能全面的Web框架，適合從小型到大型的各類Web應用開發。通過遵循其設計原則和最佳實踐，開發者可以快速構建安全、可靠且易於維護的Web應用。\n隨著對Django基礎的掌握，您可以進一步探索其他高級功能，如REST框架、信號系統、緩存機制等，以構建更複雜、更高效的應用程序。\n","permalink":"https://leetcode666.com/categories/backend/django-basics/","summary":"\u003ch1 id=\"django後端開發基礎\"\u003eDjango後端開發基礎\u003c/h1\u003e\n\u003cp\u003eDjango是一個高級的Python Web框架，它鼓勵快速開發和乾淨、實用的設計。由經驗豐富的開發人員構建，Django負責Web開發中許多麻煩的部分，因此您可以專注於編寫應用程序，而無需重新發明輪子。\u003c/p\u003e\n\u003ch2 id=\"django的核心理念\"\u003eDjango的核心理念\u003c/h2\u003e\n\u003cp\u003eDjango的設計哲學可以概括為以下幾點：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDRY (Don\u0026rsquo;t Repeat Yourself)\u003c/strong\u003e - 減少代碼重複\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e快速開發\u003c/strong\u003e - 從概念到完成的框架\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e松耦合\u003c/strong\u003e - 各個組件相互獨立\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e明確優於隱晦\u003c/strong\u003e - 顯式好於隱式\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e模型-視圖-模板\u003c/strong\u003e - 清晰的架構分離\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"環境設置\"\u003e環境設置\u003c/h2\u003e\n\u003cp\u003e開始使用Django前，需要先設置開發環境：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 創建虛擬環境\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epython -m venv venv\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 激活虛擬環境\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# Windows\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003evenv\u003cspan class=\"se\"\u003e\\S\u003c/span\u003ecripts\u003cspan class=\"se\"\u003e\\a\u003c/span\u003ectivate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# macOS/Linux\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003esource\u003c/span\u003e venv/bin/activate\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 安裝Django\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epip install django\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 檢查版本\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epython -m django --version\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"創建第一個django項目\"\u003e創建第一個Django項目\u003c/h2\u003e\n\u003cp\u003e以下是創建新Django項目的基本步驟：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 創建項目\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003edjango-admin startproject myproject\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 切換到項目目錄\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nb\"\u003ecd\u003c/span\u003e myproject\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 創建應用\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epython manage.py startapp myapp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e# 運行開發伺服器\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003epython manage.py runserver\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"django項目結構\"\u003eDjango項目結構\u003c/h2\u003e\n\u003cp\u003e一個基本的Django項目結構如下：\u003c/p\u003e","title":"Django後端開發基礎"},{"content":"我是誰 嗨，我是 Chris！一位熱衷於後端技術開發與分享的工程師。擁有超過 5 年的實際開發經驗，專精於 Python、Django 與資料庫優化。\n專業技能 程式語言：Python、JavaScript、Java 後端框架：Django、Flask、Spring Boot 資料庫：PostgreSQL、MySQL、MongoDB DevOps：Docker、Kubernetes、AWS 前端技術：HTML、CSS、React (基礎) 工作經歷 資深後端工程師 | ABC 科技有限公司 (2020-至今)\n負責公司核心 API 服務的設計與優化 帶領團隊完成多個大型專案 實現資料庫查詢效能提升 200% 軟體工程師 | XYZ 數位有限公司 (2018-2020)\n開發與維護企業內部系統 設計 RESTful API 服務 教學與分享 我深信知識分享的力量，因此創建了這個部落格，希望能夠：\n分享實用的後端技術知識與最佳實踐 提供清晰易懂的教學內容 記錄個人成長與技術探索 聯絡我 如果您有任何問題、建議或合作機會，歡迎透過以下方式聯繫我：\nEmail: chris@example.com LinkedIn: Chris Chen GitHub: maxchen0102 感謝您花時間了解我！希望我的部落格能為您提供有價值的內容。\n","permalink":"https://leetcode666.com/about/","summary":"了解更多關於我的資訊","title":"關於我"}]